name: ci
on: [push, pull_request]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN_VERSION: 1.76

# TODO caching (rust files, sccache)
# TODO ensure config scheme is up to date
# TODO yaml formatting

jobs:
  lint:
    runs-on: ubuntu-22.04
    env:
      DPRINT_VERSION: 0.45.0
      DENY_VERSION: 0.14.15
    steps:
      - uses: actions/checkout@v4

      - name: Setup path
        run: |
          CARGO_INSTALL_ROOT=${{ runner.temp }}/cache
          echo "CARGO_INSTALL_ROOT=${CARGO_INSTALL_ROOT}" >> "${GITHUB_ENV}"
          echo "DPRINT_CACHE_DIR=${CARGO_INSTALL_ROOT}/dprint" >> "${GITHUB_ENV}"
          echo "${CARGO_INSTALL_ROOT}/bin" >> "${GITHUB_PATH}"

      - name: Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.CARGO_INSTALL_ROOT }}
          key: lint-dprint-${{ env.DPRINT_VERSION }}-deny-${{ env.DENY_VERSION }}-${{ hashFiles('dprint.json') }}

      - name: Install dprint
        if: steps.cache.outputs.cache-hit != 'true'
        run: cargo install --locked 'dprint@${{ env.DPRINT_VERSION }}'
      - name: Install deny
        if: steps.cache.outputs.cache-hit != 'true'
        run: cargo install --locked 'cargo-deny@${{ env.DENY_VERSION }}'

      - name: Check formatting
        run: dprint check
      - name: Check deny
        run: cargo deny --all-features check bans licenses sources
      - name: Check advisories
        run: cargo deny --all-features check advisories
        continue-on-error: true

  main:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            component: clippy
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-musl
          - os: macos-12
            target: x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            rustflags: -C target-feature=+crt-static
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup toolchain
        run: |
          rustup toolchain install --profile minimal ${{ env.RUST_TOOLCHAIN_VERSION }} -t ${{ matrix.target }} --no-self-update
          rustup default ${{ env.RUST_TOOLCHAIN_VERSION }}

      - name: Fetch
        run: cargo fetch
      - name: Clippy
        if: ${{ matrix.component == 'clippy' }}
        run: |
          rustup component add clippy
          cargo clippy --all-targets --all-features -- -D warnings
      - name: Build debug
        run: cargo build --all-targets --all-features --target ${{ matrix.target }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --target ${{ matrix.target }} --lcov --output-path lcov.info
      - name: Push grcov results to Coveralls via GitHub Action
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: lcov.info

      - name: Test
        run: cargo test --all-features --target ${{ matrix.target }}

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: havocompare-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/havocompare${{ startsWith(matrix.os, 'windows') && '.exe' || '' }}
          if-no-files-found: error
